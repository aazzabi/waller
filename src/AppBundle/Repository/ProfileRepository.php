<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Candidature;
use AppBundle\Entity\Competence;
use AppBundle\Entity\Poste;
use AppBundle\Entity\Profile;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * ProfileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProfileRepository extends \Doctrine\ORM\EntityRepository
{
    public function search($search)
    {
        $session = new Session();
        $builder = $this->createQueryBuilder('p');

        // Disponibilité
        if ($search['disponibilite'] !== null) {
            $session->set('disponibilite', $search['disponibilite']);
        } else {
            $search['disponibilite'] = $session->get('disponibilite');
        }
        if ($search['disponibilite']) {
            $builder->andWhere('p.disponibilite = :disponibilite')
                ->setParameter('disponibilite', $search['disponibilite']);
        }

        // Expérience
        if ($search['experience'] !== null) {
            $session->set('experience', $search['experience']);
        } else {
            $search['experience'] = $session->get('experience');
        }
        if ($search['experience']) {
            $builder->andWhere('p.experience >= :experience')
                ->setParameter('experience', $search['experience']);
        }

        // Intéret
        if ($search['interet'] !== null) {
            $session->set('interet', $search['interet']);
        } else {
            $search['interet'] = $session->get('interet');
        }
        if ($search['interet']) {
            $builder->andWhere('p.interet = :interet')
                ->setParameter('interet', $search['interet']);
        }

        /// contrat
        if ($search['contrat'] !== null) {
            $session->set('contrat', $search['contrat']);
        } else {
            $search['contrat'] = $session->get('contrat');
        }
        if ($search['contrat']) {
            $builder->andWhere('p.contrat = :contrat')
                ->setParameter('contrat', $search['contrat']);
        }
        
        // competence
        if ($search['competences'] !== null) {
            $session->set('competences', $search['competences']);
        } else {
            $search['competences'] = $session->get('competences');
        }
        if ($search['competences']) {
            $builder->innerJoin('p.competences', 'c', 'WITH', 'c.id = :competences')
                ->setParameter('competences', $search['competences']);
        }

        // ambition
        if ($search['ambition'] !== null) {
            $session->set('ambition', $search['ambition']);
        } else {
            $search['ambition'] = $session->get('ambition');
        }
        if ($search['ambition']) {
            $builder->andWhere('p.ambition = :ambition')
                ->setParameter('ambition', $search['ambition']);
        }

//        // Poste
        if ($search['poste'] !== null) {
            $session->set('poste', $search['poste']);
        } else {
            $search['poste'] = $session->get('poste');
        }
        if ($search['poste']) {
            $builder
                ->innerJoin('p.candidature', 'candi')
                ->innerJoin('candi.poste', 'pst', 'WITH', 'pst.id = :poste')
                ->setParameter('poste', $search['poste']);
        }

//         Group
        if ($search['groupe'] !== null) {
            $session->set('groupe', $search['groupe']);
        } else {
            $search['groupe'] = $session->get('groupe');
        }
        if ($search['groupe']) {
            $builder
                ->innerJoin('p.candidature', 'cand')
                ->innerJoin('cand.group', 'grp', 'WITH', 'grp.id = :groupe')
                ->setParameter('groupe', $search['groupe']);
        }


        return $builder->orderBy("p.id", 'DESC')->getQuery()->getResult();
    }

    public function searchByCompetence($input)
    {
        $result = [];
        $competences = $this->_em
            ->getRepository(Competence::class)
            ->findBy(['libelle' => $input['competence']]);

        $resultProfiles = current($competences)->getProfiles();
        foreach ($resultProfiles as $profile) {
            $result[] = $profile->getId();
        }

        return $result;
    }

    public function searchByPoste($input)
    {
        $result = [];
        $postes = $this->_em->getRepository(Poste::class)->findBy(['libelle' => $input['poste']]);
        $resultCandidature = current($postes)->getCandidatures();
        foreach ($resultCandidature as $candidature) {
            $result[] = $candidature->getProfile()->getId();
        }

        return $result;
    }
}
